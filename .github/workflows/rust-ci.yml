name: rust-ci

on:
  push:
    branches: [ main ]
    tags: [ '*' ]
  workflow_dispatch:

permissions:
  id-token: write
  contents: write
  checks: write

env:
  CARGO_TERM_COLOR: always
  PROJECT_NAME: hello-blea

jobs:
  build:
    strategy:
      matrix:
        os:
          - ubuntu-latest
          - windows-latest
          - macos-latest
        # https://docs.github.com/en/actions/using-jobs/using-a-matrix-for-your-jobs#expanding-or-adding-matrix-configurations
        include:
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
          - target: armv7-unknown-linux-gnueabihf
            os: ubuntu-latest
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
          - target: x86_64-apple-darwin
            os: macos-latest
          - target: aarch64-apple-darwin
            os: macos-latest
          - target: x86_64-pc-windows-msvc
            os: windows-latest

    runs-on: ${{ matrix.os }}

    steps:
      - name: 🌩️ Checkout repository
        uses: actions/checkout@v3

      - name: 🧰 Install linux dependencies
        if: ${{ runner.os == 'Linux' }}
        run: |
          sudo apt-get update
          sudo apt-get install libdbus-1-dev

      - name: 📚️ Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          target: ${{ matrix.target }}
          override: true

      - name: 🔧 Cache packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: 🔩Test
        run: cargo test

      - name: 📦 Build
        run: |
          cargo build --release --locked --target ${{ matrix.target }}

      - name: 🗜️ Tarball release
        if: ${{ runner.os != 'Windows' }}
        run: |
          tar czf ${{ env.PROJECT_NAME }}.tar.gz -C target/${{ matrix.target }}/release/ ${{ env.PROJECT_NAME }}

      - name: 🗜️ Tarball release (Windows)
        if: ${{ runner.os == 'Windows' }}
        run: |
          tar czf ${{ env.PROJECT_NAME }}.tar.gz -C target/${{ matrix.target }}/release/ ${{ env.PROJECT_NAME }}.exe

      - name: 🌈 Upload binary
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.PROJECT_NAME }}-${{ matrix.target }}.tar.gz
          path: ${{ env.PROJECT_NAME }}.tar.gz
          retention-days: 7

  release:
    needs: [ build ]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: 🌩️ Checkout repository
        uses: actions/checkout@v3

      - name: 🚀 Release
        id: create_release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}

  crates_io_publish:
    name: Publish to crates.io
    if: ${{ false }} #startsWith(github.ref, 'refs/tags/')
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: 🌩️ Checkout repository
        uses: actions/checkout@v3

      - name: 🦀 Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          profile: minimal

      - name: 🔑 Login to crates.io
        run: cargo login $CRATES_IO_TOKEN
        env:
          CRATES_IO_TOKEN: ${{ secrets.CRATES_IO_TOKEN }}

      - name: 🧑‍🚀 Dry run publish
        run: cargo publish --dry-run

      - name: 🚀 Publish
        run: cargo publish

  upload_release_assets:
    name: Upload release assets
    if: startsWith(github.ref, 'refs/tags/')
    needs: release
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target:
          - aarch64-unknown-linux-gnu
          - armv7-unknown-linux-gnueabihf
          - x86_64-unknown-linux-gnu
          - x86_64-apple-darwin
          - aarch64-apple-darwin
          - x86_64-pc-windows-msvc
    steps:
      - id: vars
        run: echo ::set-output name=version::${GITHUB_REF/refs\/tags\//}
      - uses: actions/download-artifact@v2
        with:
          name: ${{ env.PROJECT_NAME }}-${{ matrix.target }}.tar.gz
      - name: Upload release asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.release.outputs.upload_url }}
          asset_path: ./${{ env.PROJECT_NAME }}.tar.gz
          asset_name: ${{ env.PROJECT_NAME }}-${{ steps.vars.outputs.version }}-${{ matrix.target }}.tar.gz
          asset_content_type: application/gzip
